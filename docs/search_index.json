[["appendix-b-automatically-tuning-asurats-parameters.html", "Chapter 15 Appendix B: automatically tuning ASURAT’s parameters", " Chapter 15 Appendix B: automatically tuning ASURAT’s parameters In this section, we demonstrate tuning the parameters of ASURAT for creating an interpretable system of signs as well as a sign-by-sample matrix (SSM) for Disease Ontology (DO) by using a single-cell RNA sequencing data day7_hypo (cervical cancer data under normoxic condition). Below are the R scripts to produce a series of plots of UMAP of the SSMs for DO. Please note that the R codes in function_movie.R is almost the same with those in function_sign.R except that function_movie.R always requires an argument category as input and it does not record the parameters in obj[[\"history\"]] for faster computing. # ---------------------------------------- # Installation # ---------------------------------------- # General library(tidyverse) # For efficient handling of data.frame # Below is a memo for attaching org.Hs.eg.db # options(connectionObserver = NULL) library(org.Hs.eg.db) # For using human genome annotation package # Plot library(ggrepel) # For graphics with labeling # Utilities library(Rtsne) # For using Rtsne library(umap) # For using umap library(destiny) # For using diffusion map library(cluster) # For using `pam` # Databases library(DOSE) # For using DB for Disease Ontology library(clusterProfiler) # For using DB for Gene Ontology library(GOSemSim) # For using godata in GOSemSim package # ---------------------------------------- # Reading files # ---------------------------------------- source(&quot;R/function_movie.R&quot;) tidy_KEGG &lt;- readRDS(file = &quot;data/2020_001_databases/20201213_tidy_KEGG_human.rds&quot;) #IC_DO &lt;- readRDS(file = &quot;data/2020_001_databases/20201213_IC_DO_human.rds&quot;) day7_hypo &lt;- readRDS(file = &quot;backup/02_005_day7_hypo_normalized.rds&quot;) day7_hypo_cor &lt;- readRDS(file = &quot;backup/02_006_day7_hypo_correlation.rds&quot;) # ---------------------------------------- # Definition # ---------------------------------------- tidy_DB &lt;- tidy_DO obj &lt;- day7_hypo obj_cor &lt;- day7_hypo_cor data_type &lt;- &quot;KEGG&quot; category &lt;- &quot;pathway&quot; title &lt;- paste(&quot;day7_hypo (&quot;, data_type, &quot;: &quot;, category, &quot;)&quot;, sep = &quot;&quot;) dirname &lt;- &quot;movie&quot; do_tsne &lt;- function(obj_red){ do_tsne_sign_movie(obj = obj_red, data_type = data_type, category = category, pca_dim = NULL, tsne_dim = 2) } do_umap &lt;- function(obj_red){ do_umap_sign_movie(obj = obj_red, data_type = data_type, category = category, pca_dim = NULL, umap_dim = 2) } do_dmap &lt;- function(obj_red){ do_DiffusionMap_movie(obj = obj_red, data_type = data_type, category = category, sigma = &quot;local&quot;, distance = &quot;euclidean&quot;) } # ---------------------------------------- # Setting the global parameters # ---------------------------------------- min_ngenes &lt;- 2 max_ngenes &lt;- 1000 threshold &lt;- 0.8 keep_rareID &lt;- TRUE plot_type &lt;- &quot;umap&quot; xlabel &lt;- &quot;UMAP_1&quot; ylabel &lt;- &quot;UMAP_2&quot; # ---------------------------------------- # Preparing # ---------------------------------------- obj[[&quot;sign&quot;]][[data_type]] &lt;- tidy_DB obj &lt;- do_quickQC_sign_movie(obj = obj, data_type = data_type, category = category, min_ngenes = min_ngenes, max_ngenes = max_ngenes) # ---------------------------------------- # Loop # ---------------------------------------- cnt &lt;- 1 for(min_cnt in 2:4){ for(i in 0:35){ th_posi = 0.15 + i * 0.01 for(j in 0:20){ th_nega = -(0.15 + j * 0.02) obj_red &lt;- separate_variables_sign_movie( obj = obj, obj_cor = obj_cor, data_type = data_type, category = category, method = &quot;spearman&quot;, th_posi = th_posi, th_nega = th_nega) obj_red &lt;- select_sign_movie( obj = obj_red, data_type = data_type, category = category, min_cnt = min_cnt, min_cnt_weak = 2) if(data_type == &quot;DO&quot;){ obj_red &lt;- compute_SemSim_sign_movie( obj = obj_red, data_type = data_type, category = category, measure = &quot;Jiang&quot;, orgdb = NULL, treeTable = NULL, IC = IC_DO) obj_red &lt;- reduce_sign_movie( obj = obj_red, data_type = data_type, category = category, threshold = threshold, keep_rareID = keep_rareID) }else if(data_type == &quot;GO&quot;){ obj_red &lt;- compute_SemSim_sign_movie( obj = obj_red, data_type = data_type, category = category, measure = &quot;Jiang&quot;, orgdb = org.Hs.eg.db, treeTable = NULL, IC = IC_GO) obj_red &lt;- reduce_sign_movie( obj = obj_red, data_type = data_type, category = category, threshold = threshold, keep_rareID = keep_rareID) } obj_red &lt;- make_signxsample_matrix_movie( obj = obj_red, data_type = data_type, category = category, weight_strg = 0.5, weight_vari = 0.5) if(plot_type == &quot;tsne&quot;){ obj_red &lt;- try(do_tsne(obj = obj_red), silent = TRUE) }else if(plot_type == &quot;umap&quot;){ obj_red &lt;- try(do_umap(obj = obj_red), silent = TRUE) }else if(plot_type == &quot;dmap&quot;){ obj_red &lt;- try(do_dmap(obj = obj_red), silent = TRUE) } if(class(obj_red) == &quot;try-error&quot;){ print(&quot;Skip this parameter set.&quot;) next } if(plot_type == &quot;tsne&quot;){ plot_tsne_sign_movie( obj = obj_red, data_type = data_type, category = category, p1 = th_posi, p2 = th_nega, p3 = min_cnt, title = title, xlabel = xlabel, ylabel = ylabel, dirname = dirname, cnt = cnt) }else if(plot_type == &quot;umap&quot;){ plot_umap_sign_movie( obj = obj_red, data_type = data_type, category = category, p1 = th_posi, p2 = th_nega, p3 = min_cnt, title = title, xlabel = xlabel, ylabel = ylabel, dirname = dirname, cnt = cnt) }else if(plot_type == &quot;dmap&quot;){ plot_DiffusionMap_movie( obj = obj_red, data_type = data_type, category = category, p1 = th_posi, p2 = th_nega, p3 = min_cnt, title = title, xlabel = xlabel, ylabel = ylabel, dirname = dirname, cnt = cnt) } cnt &lt;- cnt + 1 } } } "]]
