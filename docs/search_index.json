[["appendix-d-analyzing-scrna-seq-data-by-existing-method-iv.html", "Chapter 16 Appendix D: analyzing scRNA-seq data by existing method IV 16.1 Preprocessing 16.2 Cluster cells 16.3 Find differentially expressed genes 16.4 Save results 16.5 Infer cell types for PBMC datasets", " Chapter 16 Appendix D: analyzing scRNA-seq data by existing method IV In this section, we analyze scRNA-seq datasets using SC3. The following libraries are used. library(tidyverse) # For efficient handling of data.frame library(org.Hs.eg.db) # For using human genome annotation package library(DT) # For using datatable library(SC3) # For using SC3 library(scater) # For using SC3 library(SingleCellExperiment) # For using SC3 packageVersion(&quot;SC3&quot;) ## [1] &#39;1.18.0&#39; [1] ‘1.18.0’ 16.1 Preprocessing Load the data. rm(list=ls()) sc68_vehi &lt;- readRDS(file = &quot;backup/01_005_sc68_vehi_normalized.rds&quot;) sc68_cisp &lt;- readRDS(file = &quot;backup/02_005_sc68_cisp_normalized.rds&quot;) pbmc_4000 &lt;- readRDS(file = &quot;backup/10_005_pbmc_4000_normalized.rds&quot;) pbmc_6000 &lt;- readRDS(file = &quot;backup/11_005_pbmc_6000_normalized.rds&quot;) Check the size of the gene-by-sample matrices. dim(sc68_vehi[[&quot;data&quot;]][[&quot;raw&quot;]]) dim(sc68_cisp[[&quot;data&quot;]][[&quot;raw&quot;]]) dim(pbmc_4000[[&quot;data&quot;]][[&quot;raw&quot;]]) dim(pbmc_6000[[&quot;data&quot;]][[&quot;raw&quot;]]) [1] 6581 3923 [1] 6347 2285 [1] 6658 3815 [1] 5169 4878 Create SC3 objects (SingleCellExperiment). create_sce_object &lt;- function(obj){ obj_sce &lt;- SingleCellExperiment( assay = list(counts = as.matrix(obj[[&quot;data&quot;]][[&quot;bayNorm&quot;]][[&quot;Bay_out&quot;]]), logcounts = as.matrix(obj[[&quot;data&quot;]][[&quot;normalized&quot;]])), colData = list(barcode = obj[[&quot;sample&quot;]][[&quot;barcode&quot;]]) ) rowData(obj_sce)$feature_symbol &lt;- obj[[&quot;variable&quot;]][[&quot;symbol&quot;]] obj_sce &lt;- obj_sce[!duplicated(rowData(obj_sce)$feature_symbol),] obj &lt;- NULL obj[[&quot;sce&quot;]] &lt;- obj_sce return(obj) } sc68_vehi &lt;- create_sce_object(obj = sc68_vehi) sc68_cisp &lt;- create_sce_object(obj = sc68_cisp) pbmc_4000 &lt;- create_sce_object(obj = pbmc_4000) pbmc_6000 &lt;- create_sce_object(obj = pbmc_6000) Run principal component analysis (PCA). sc68_vehi[[&quot;sce&quot;]] &lt;- runPCA(sc68_vehi[[&quot;sce&quot;]]) sc68_cisp[[&quot;sce&quot;]] &lt;- runPCA(sc68_cisp[[&quot;sce&quot;]]) pbmc_4000[[&quot;sce&quot;]] &lt;- runPCA(pbmc_4000[[&quot;sce&quot;]]) pbmc_6000[[&quot;sce&quot;]] &lt;- runPCA(pbmc_6000[[&quot;sce&quot;]]) 16.2 Cluster cells Run sc3(), in which parameter ks is subjectively determined by considering biological backgrounds. Here, sc3() could not compute for sc68_vehi and sc68_cisp. set.seed(8) pbmc_4000[[&quot;sce&quot;]] &lt;- sc3(pbmc_4000[[&quot;sce&quot;]], ks = 2:8, biology = TRUE) pbmc_6000[[&quot;sce&quot;]] &lt;- sc3(pbmc_6000[[&quot;sce&quot;]], ks = 2:8, biology = TRUE) Visualize differentially expressed genes, which are calculated using non-parametric Kruskal-Wallis test in SC3 package. # ---------------------------------------- # pbmc_4000 # ---------------------------------------- p &lt;- sc3_plot_de_genes(pbmc_4000[[&quot;sce&quot;]], k = 8) filename &lt;- &quot;figures/figure_10_0800.png&quot; ggsave(file = filename, plot = p, dpi = 300, width = 8.5, height = 8.5) # ---------------------------------------- # pbmc_6000 # ---------------------------------------- p &lt;- sc3_plot_de_genes(pbmc_6000[[&quot;sce&quot;]], k = 6) filename &lt;- &quot;figures/figure_11_0800.png&quot; ggsave(file = filename, plot = p, dpi = 300, width = 8.5, height = 8.5) 16.3 Find differentially expressed genes Find marker genes by using sc3_plot_markers() in SC3 package. Although we changed the argument k from 2 to 8, the following values seemed to be the best of all. p &lt;- sc3_plot_markers(pbmc_4000[[&quot;sce&quot;]], k = 8) filename &lt;- &quot;figures/figure_10_0801.png&quot; ggsave(file = filename, plot = p, dpi = 300, width = 8.5, height = 8.5) p &lt;- sc3_plot_markers(pbmc_6000[[&quot;sce&quot;]], k = 8) filename &lt;- &quot;figures/figure_11_0801.png&quot; ggsave(file = filename, plot = p, dpi = 300, width = 8.5, height = 8.5) Run get_de_genes() in SC3 package to get differentially expressed genes. Note that as described in the package of SC3, the calculation of differential expression after clustering can introduce a bias in the distribution of p-values, and thus it is advised to use the p-values for ranking the genes only. pbmc_4000[[&quot;DEGs&quot;]] &lt;- data.frame(pval = get_de_genes( dataset = pbmc_4000[[&quot;sce&quot;]]@assays@data@listData[[&quot;logcounts&quot;]], labels = pbmc_4000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]])) pbmc_6000[[&quot;DEGs&quot;]] &lt;- data.frame(pval = get_de_genes( dataset = pbmc_6000[[&quot;sce&quot;]]@assays@data@listData[[&quot;logcounts&quot;]], labels = pbmc_6000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]])) Run get_marker_genes() in SC3 package to find marker genes, where p-values are adjusted ones. # ---------------------------------------- # pbmc_4000 # ---------------------------------------- tmp &lt;- pbmc_4000[[&quot;markers&quot;]] tmp &lt;- get_marker_genes( dataset = pbmc_4000[[&quot;sce&quot;]]@assays@data@listData[[&quot;logcounts&quot;]], labels = pbmc_4000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]]) tmp$gene &lt;- rownames(pbmc_4000[[&quot;DEGs&quot;]]) inds &lt;- order(tmp$clusts, tmp$pvalue) tmp &lt;- tmp[inds,] tmp &lt;- tmp[which(tmp$pvalue &lt; 0.5),] pbmc_4000[[&quot;markers&quot;]] &lt;- tmp # ---------------------------------------- # pbmc_6000 # ---------------------------------------- tmp &lt;- pbmc_6000[[&quot;markers&quot;]] tmp &lt;- get_marker_genes( dataset = pbmc_6000[[&quot;sce&quot;]]@assays@data@listData[[&quot;logcounts&quot;]], labels = pbmc_6000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]]) tmp$gene &lt;- rownames(pbmc_6000[[&quot;DEGs&quot;]]) inds &lt;- order(tmp$clusts, tmp$pvalue) tmp &lt;- tmp[inds,] tmp &lt;- tmp[which(tmp$pvalue &lt; 0.5),] pbmc_6000[[&quot;markers&quot;]] &lt;- tmp Users can check the marker genes of each cluster by the following command: datatable(pbmc_4000[[&quot;markers&quot;]], rownames = FALSE) datatable(pbmc_6000[[&quot;markers&quot;]], rownames = FALSE) pbmc_4000 pbmc_6000 16.4 Save results Save the objects. saveRDS(pbmc_4000, file = &quot;backup/10_800_pbmc_4000_sc3.rds&quot;) saveRDS(pbmc_6000, file = &quot;backup/11_800_pbmc_6000_sc3.rds&quot;) One can load the results. pbmc_4000 &lt;- readRDS(file = &quot;backup/10_800_pbmc_4000_sc3.rds&quot;) pbmc_6000 &lt;- readRDS(file = &quot;backup/11_800_pbmc_6000_sc3.rds&quot;) 16.5 Infer cell types for PBMC datasets Load the data. rm(list=ls()) source(&quot;R/function_scran.R&quot;) pbmc_4000 &lt;- readRDS(file = &quot;backup/10_800_pbmc_4000_sc3.rds&quot;) pbmc_6000 &lt;- readRDS(file = &quot;backup/11_800_pbmc_6000_sc3.rds&quot;) Based on the result of sc3(), we manually investigate marker genes using GeneCards as follows: pbmc_4000 1: NK or NKT cells # GZMH (padj ~ 0), GZMK (padj ~ e-143), GNLY (padj ~ e-131) 2: Unspecified 3: T cell # TRGC2 (padj ~ e-282), TCL1A (padj ~ e-213) 4: Unspecified 5: Unspecified 6: Unspecified 7: Unspecified 8: Monocyte # GSN (padj ~ e-124), LILRB4 (padj ~ e-114) pbmc_6000 1: Unspecified 2: Unspecified 3: Monocyte # S100A8 (padj ~ 0), CD14 (padj ~ 0), S100A12 (padj ~ e-298) 4: Unspecified 5: B cell # CD79A (padj ~ 0), CD79B (padj ~ 0), MS4A1 (padj ~ 0) 6: Unspecified 7: B cell # SPI1 (padj ~ e-240), LYN (padj ~ e-189) 8: NK or NKT cell # GNLY (padj ~ 0), GZMA (padj ~ 0), GZMB (padj ~ 0) Identify the cell types. # ---------------------------------------- # pbmc_4000 # ---------------------------------------- tmp &lt;- as.integer(as.character( pbmc_4000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]])) tmp[tmp == 1] &lt;- &quot;NK or NKT cell&quot; tmp[tmp == 2] &lt;- &quot;Unspecified&quot; tmp[tmp == 3] &lt;- &quot;T cell&quot; tmp[tmp == 4] &lt;- &quot;Unspecified&quot; tmp[tmp == 5] &lt;- &quot;Unspecified&quot; tmp[tmp == 6] &lt;- &quot;Unspecified&quot; tmp[tmp == 7] &lt;- &quot;Unspecified&quot; tmp[tmp == 8] &lt;- &quot;Monocyte&quot; tmp &lt;- factor(tmp, levels = c(&quot;T cell&quot;, &quot;Monocyte&quot;, &quot;NK or NKT cell&quot;, &quot;Unspecified&quot;)) pbmc_4000[[&quot;mylabel&quot;]] &lt;- tmp # ---------------------------------------- # pbmc_6000 # ---------------------------------------- tmp &lt;- as.integer(as.character( pbmc_6000[[&quot;sce&quot;]]@colData@listData[[&quot;sc3_8_clusters&quot;]])) tmp[tmp == 1] &lt;- &quot;Unspecified&quot; tmp[tmp == 2] &lt;- &quot;Unspecified&quot; tmp[tmp == 3] &lt;- &quot;Monocyte&quot; tmp[tmp == 4] &lt;- &quot;Unspecified&quot; tmp[tmp == 5] &lt;- &quot;B cell&quot; tmp[tmp == 6] &lt;- &quot;NK or NKT cell&quot; tmp[tmp == 7] &lt;- &quot;B cell&quot; tmp[tmp == 8] &lt;- &quot;NK or NKT cell&quot; tmp &lt;- factor(tmp, levels = c(&quot;Monocyte&quot;, &quot;B cell&quot;, &quot;NK or NKT cell&quot;, &quot;Unspecified&quot;)) pbmc_6000[[&quot;mylabel&quot;]] &lt;- tmp The numbers of cells are stored in a table. identify_cell &lt;- function(obj){ tmp &lt;- obj[[&quot;mylabel&quot;]] cells &lt;- levels(tmp) df &lt;- c() for(cell in cells){ df &lt;- rbind(df, c(cell, length(tmp[tmp==cell]))) } df &lt;- as.data.frame(df) colnames(df) &lt;- c(&quot;cell_type&quot;, &quot;n&quot;) return(df) } pbmc_4000[[&quot;population&quot;]] &lt;- identify_cell(obj = pbmc_4000) pbmc_6000[[&quot;population&quot;]] &lt;- identify_cell(obj = pbmc_6000) Save the objects. saveRDS(pbmc_4000, file = &quot;backup/10_801_pbmc_4000_sc3.rds&quot;) saveRDS(pbmc_6000, file = &quot;backup/11_801_pbmc_6000_sc3.rds&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
