[["collectdb.html", "Chapter 7 Collecting databases (optional) 7.1 Disease Ontology DB 7.2 Cell Ontology DB 7.3 Gene Ontology DB 7.4 KEGG 7.5 Reactome", " Chapter 7 Collecting databases (optional) In this section, the following databases (DBs) are downloaded and properly formatted. Since all of the results in this section have already been prepared for human and mouse datasets in December 2020 (see data/2020_001_databases/), users may be able to skip this section. DB for Disease Ontology (DO) for human disease DB for Cell Ontology (CO) DB for Gene Ontology (GO) DB for Kyoto Encyclopedia of Genes and Genomes (KEGG) DB for Reactome 7.1 Disease Ontology DB source(&quot;R/function_DiseaseOntology.R&quot;) The following functions collect_DO(), format_DO(), and compute_IC_DO() (i) downloads a database for Disease Ontology, (ii) formats the results, and (iii) prepares a list of information content (IC) (Mistry and Pavlidis, BMC Bioinformatics, 2008), respectively. IC value represents the depth of the biological term in the ontology, which will be later used for computing similarities between terms. # # Note again that the following result has already been prepared for human and # mouse datasets in December 2020 (see `data/2020_001_databases/`). # library(DO.db) dict_DO &lt;- collect_DO() tidy_DO &lt;- format_DO(dict = dict_DO) IC_DO &lt;- compute_IC_DO(tidy = tidy_DO) # # Save the result. # saveRDS(dict_DO, file = &quot;data/2020_001_databases/YYYYMMDD_dict_DO_human.rds&quot;) saveRDS(tidy_DO, file = &quot;data/2020_001_databases/YYYYMMDD_tidy_DO_human.rds&quot;) saveRDS(IC_DO, file = &quot;data/2020_001_databases/YYYYMMDD_IC_DO_human.rds&quot;) 7.2 Cell Ontology DB source(&quot;R/function_CellOntology.R&quot;) The following functions collect_CO(), format_CO(), make_treeTable_CO(), and compute_IC_CO() (i) downloads a database for Disease Ontology, (ii) formats the results, and (iii) prepares a list of information content (IC) (Mistry and Pavlidis, BMC Bioinformatics, 2008), respectively. Tips: As of December 2020, Cell Ontology database might not be complete enough for some biological contexts. For example, the well-known marker genes for pancreatic beta cell, Ins1 and Ins2, are not registered in the gene slot of type B pancreatic cell with CO ID CL:0000169. Be careful of using IC values of CO, which may not be always useful for computing similarities between biological terms. Nevertheless, we computed the IC values as in the future CO database might be better annotated. # # Note again that the following result has already been prepared for human and # mouse datasets in December 2020 (see `data/2020_001_databases/`). # dict_CO &lt;- collect_CO(orgdb = org.Hs.eg.db) tidy_CO &lt;- format_CO(dict = dict_CO) treeTable_CO &lt;- make_treeTable_CO(tidy = tidy_CO) IC_CO &lt;- compute_IC_CO(tidy = tidy_CO, treeTable = treeTable_CO) # # Save the result. # saveRDS(dict_CO, file = &quot;data/2020_001_databases//YYYYMMDD_dict_CO_human.rds&quot;) saveRDS(tidy_CO, file = &quot;data/2020_001_databases//YYYYMMDD_tidy_CO_human.rds&quot;) saveRDS(treeTable_CO, file = &quot;data/2020_001_databases//YYYYMMDD_treeTable_CO_human.rds&quot;) saveRDS(IC_CO, file = &quot;data/2020_001_databases//YYYYMMDD_IC_CO_human.rds&quot;) 7.3 Gene Ontology DB source(&quot;R/function_GeneOntology.R&quot;) The following functions collect_GO(), format_GO(), and compute_IC_GO() (i) downloads a database for Gene Ontology, (ii) formats the results, and (iii) prepares a list of information content (IC), respectively. The arguments of collect_GO() are orgdb (annotation data package such as org.Hs.eg.db and org.Mm.eg.db) and all_geneIDs (all Entrez gene IDs of a specific organism). # # Note again that the following result has already been prepared for human and # mouse datasets in December 2020 (see `data/2020_001_databases/`). # library(GO.db) all_geneIDs &lt;- as.list(org.Hs.egGO) all_geneIDs &lt;- names(all_geneIDs[!is.na(all_geneIDs)]) dict_GO &lt;- collect_GO(orgdb = org.Hs.eg.db, all_geneIDs = all_geneIDs) tidy_GO &lt;- format_GO(dict = dict_GO) IC_GO &lt;- compute_IC_GO(tidy = tidy_GO) # # Save the result. # saveRDS(dict_DO, file = &quot;data/2020_001_databases/YYYYMMDD_dict_GO_human.rds&quot;) saveRDS(tidy_DO, file = &quot;data/2020_001_databases/YYYYMMDD_tidy_GO_human.rds&quot;) saveRDS(IC_DO, file = &quot;data/2020_001_databases/YYYYMMDD_IC_GO_human.rds&quot;) 7.4 KEGG source(&quot;R/function_KEGG.R&quot;) The following functions collect_KEGG() and format_KEGG() (i) downloads a database for KEGG and (ii) formats the results, respectively. In the current version, KEGG PATHWAY (\"pathway\") and MODULE (\"module\") can be input into collect_KEGG() (cf. KEGGREST function listDatabases()). The arguments of collect_KEGG() are organism (such as Homo sapiens \"hsa\", obeying the naming rule of KEGG) and category_names (such as \"pathway\" and \"module\"). This function requires an internet connection. # # Note again that the following result has already been prepared for human and # mouse datasets in December 2020 (see `data/2020_001_databases/`). # # Note that `collect_KEGG` uses `KEGGREST` function `keggGet` with internet # connection, which may produce both successful and unsuccessful results. # dict_KEGG_raw &lt;- collect_KEGG(organism = &quot;hsa&quot;, category_names = c(&quot;pathway&quot;)) dict_KEGG &lt;- list(pathway = dict_KEGG_raw[[&quot;pathway&quot;]][[&quot;success&quot;]]) tidy_KEGG &lt;- format_KEGG(dict = dict_KEGG) # # Save the result. # saveRDS(dict_KEGG_raw, file = &quot;data/2020_001_databases/YYYYMMDD_dict_KEGG_raw_human.rds&quot;) saveRDS(dict_KEGG, file = &quot;data/2020_001_databases/YYYYMMDD_dict_KEGG_human.rds&quot;) saveRDS(tidy_KEGG, file = &quot;data/2020_001_databases/YYYYMMDD_tidy_KEGG_human.rds&quot;) 7.5 Reactome source(&quot;R/function_Reactome.R&quot;) The following functions collect_Reactome() and format_Reactome() (i) downloads a database for Reactome and (ii) formats the results, respectively. In the current version, Reactome pathway (\"PATHID\") can be input into collect_Reactome() (cf. reactome.db functions ls(\"package:reactome.db\") and keytypes(reactome.db)). The arguments are organism (such as Homo sapiens Homo sapiens, obeying the naming rule of reactome.db) and category_names (such as PATHID). # # Note again that the following result has already been prepared for human and # mouse datasets in December 2020 (see `data/2020_001_databases/`). # # Note that `collect_Reactome` may produce both successful and unsuccessful # results. # dict_Reactome_raw &lt;- collect_Reactome(organism = &quot;Homo sapiens&quot;, category_names = c(&quot;PATHID&quot;)) dict_Reactome &lt;- list(pathid = dict_Reactome_raw[[&quot;PATHID&quot;]][[&quot;success&quot;]]) tidy_Reactome &lt;- format_Reactome(dict = dict_Reactome) # # Save the result. # saveRDS(dict_Reactome_raw, file = &quot;data/2020_001_databases/YYYYMMDD_dict_Reactome_raw_human.rds&quot;) saveRDS(dict_Reactome, file = &quot;data/2020_001_databases/YYYYMMDD_dict_Reactome_human.rds&quot;) saveRDS(tidy_Reactome, file = &quot;data/2020_001_databases/YYYYMMDD_tidy_Reactome_human.rds&quot;) "]]
